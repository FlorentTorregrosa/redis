<?php

/**
 * Bugfixes made over time test class.
 */
abstract class AbstractRedisCacheFixesUnitTestCase extends AbstractRedisCacheUnitTestCase
{
    public function testTemporaryCacheExpire()
    {
        global $conf; // We are in unit tests so variable table does not exist.

        $backend = $this->getBackend();

        // Permanent entry.
        $backend->set('test1', 'foo', CACHE_PERMANENT);
        $data = $backend->get('test1');
        $this->assertNotNull($data);
        $this->assertIdentical('foo', $data->data);

        // Permanent entries should not be dropped on clear() call.
        $backend->clear();
        $data = $backend->get('test1');
        $this->assertNotNull($data);
        $this->assertIdentical('foo', $data->data);

        // Expiring entry with permanent default lifetime.
        $conf['cache_lifetime'] = 0;
        $backend->set('test2', 'bar', CACHE_TEMPORARY);
        sleep(2);
        $data = $backend->get('test2');
        $this->assertNotNull($data);
        $this->assertIdentical('bar', $data->data);
        sleep(2);
        $data = $backend->get('test2');
        $this->assertNotNull($data);
        $this->assertIdentical('bar', $data->data);

        // Expiring entry with negative lifetime.
        $backend->set('test3', 'baz', time() - 100);
        $data = $backend->get('test3');
        $this->assertTrue(empty($data));

        // Expiring entry with short lifetime.
        $backend->set('test4', 'foobar', time() + 2);
        $data = $backend->get('test4');
        $this->assertNotNull($data);
        $this->assertIdentical('foobar', $data->data);
        sleep(3);
        $data = $backend->get('test4');
        $this->assertTrue(empty($data));

        // Expiring entry with short default lifetime.
        $conf['cache_lifetime'] = 2;
        $backend->set('test5', 'foobaz', CACHE_TEMPORARY);
        $data = $backend->get('test5');
        $this->assertNotNull($data);
        $this->assertIdentical('foobaz', $data->data);
        sleep(3);
        $data = $backend->get('test5');
        $this->assertTrue(empty($data));
    }
}

/**
 * Predis cache flush testing.
 */
class PredisCacheFixesUnitTestCase extends AbstractRedisCacheFixesUnitTestCase
{

    public static function getInfo()
    {
        return array(
            'name'         => 'Predis cache fixes',
            'description'  => 'Tests Redis module cache fixes feature.',
            'group'        => 'Redis',
        );
    }

    protected function getCacheBackendClass()
    {
        global $conf;

        // FIXME: This is definitely ugly but we have no choice: during unit
        // testing Drupal will attempt to reach the database if do not prepend
        // our autoloader manually. We can't do class_exists() calls either,
        // they will lead to Drupal crash in all case.
        if (!defined('PREDIS_BASE_PATH')) {
            define('PREDIS_BASE_PATH', DRUPAL_ROOT . '/sites/all/libraries/predis/lib/');
        }

        spl_autoload_register(function($className) {
            $parts = explode('\\', $className);
            if ('Predis' === $parts[0]) {
                $filename = PREDIS_BASE_PATH . implode('/', $parts) . '.php';
                return (bool)include_once $filename;
            }
            return false;
        }, null, true);

        $conf['redis_client_interface'] = 'Predis';

        return 'Redis_Cache_Predis';
    }
}

/**
 * PhpRedis cache flush testing.
 */
class PhpRedisCacheFixesUnitTestCase extends AbstractRedisCacheFixesUnitTestCase
{
    public static function getInfo()
    {
        return array(
            'name'        => 'PhpRedis cache fixes',
            'description' => 'Tests Redis module cache fixes feature.',
            'group'       => 'Redis',
        );
    }

    protected function getCacheBackendClass()
    {
        global $conf;

        if (extension_loaded('redis') && class_exists('Redis')) {
            $conf['redis_client_interface'] = 'PhpRedis';

            return 'Redis_Cache_PhpRedis';
        }
    }
}
